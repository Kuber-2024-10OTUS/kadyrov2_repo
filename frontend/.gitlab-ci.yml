stages:
  - build
  - test
  - release
  - deploy
  #- notify


variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  TEXT: ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar


cache:
  paths:
    - frontend/dist


build-frontend-code-job:
  stage: build  
  script:        
    - cd frontend
    # - mvn package -Dversion.application=${VERSION}
    # - sed -i "s/sausage-store-0.0.1/sausage-store-${VERSION}/g" package.json
    - npm install
    - npm run build
  #artifacts:
    #name: "frontend"
    #paths:
      #- frontend/dist/frontend
  # only:
  #   changes:
  #   - frontend/**/*


sonarqube-frontend-sast:
  stage: test
  needs:
    - build-frontend-code-job
  # image: sonarsource/sonar-scanner-cli
  # variables:
  #   SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  # cache:
  #   key: "${CI_JOB_NAME}"
  #   paths:
  #     - .sonar/cache
  script:
    - cd frontend
    - npm install -g sonarqube-scanner
    - >
      sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_FRONTEND_LOGIN}


gitlab-sast:
  stage: test
  needs:
    - build-frontend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml


upload-frontend-release:
  stage: release
  needs:
    - sonarqube-frontend-sast
    - gitlab-sast
  script:
    - cd frontend/dist
    - tar czvf sausage-store-24.3.tar.gz dist frontend
    - >
      curl -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file sausage-store-24.3.tar.gz
      ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/frontend/dist/frontend/sausage-store-24.3.tar.gz
      

deploy-frontend:
  stage: deploy
  needs:
    - upload-frontend-release
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./frontend/nginx.conf ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store.conf
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}"; export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_FRONTEND_NAME=${NEXUS_REPO_FRONTEND_NAME}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; setsid /bin/bash -s " < ./frontend/deploy.sh
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${DEV_HOST}:80
    auto_stop_in: 1h
  rules:
    - when: manual

 
# telegram-notification-frontend:
#   stage: notify
#   needs:
#     - build-frontend-code-job
#     - sonarqube-frontend-sast
#   script:
#      - 'curl -s -X POST --location --header "PRIVATE-TOKEN: Zs9_AC8tvymP_EJTHXpa" --header "Content-Type: application/json" --data "{\"chat_id\": \"$id\", \"text\": \"Хасанов Булат собрал frontend приложение! $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}" https://api.telegram.org/bot$bot_token/sendMessage' 
#   rules:
#     - when: on_success
#       if: '$CI_COMMIT_TITLE == "send notification"'
#       changes:
#         - frontend/**/* 